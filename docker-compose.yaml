version: '3'
services:
  frontend:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 80 of the container to port 8080 on the host
      # Access the application at http://localhost:8080
      - "8080:80"
    volumes:
      # Mount the frontend directory
      - ./frontend/src:/usr/share/nginx/html
  orchestrator:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000 # For HTTP
      # Expose port 5001 on the host, and map port 5001 of the container to port 5001 on the host
      - 5001:5001 # For gRPC
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app.py
      # The PYTHONPATH environment variable specifies where Python looks for modules/packages
      # Setting it to /app ensures imports can be resolved relative to the project root
      - PYTHONPATH=/app
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the orchestrator/src directory in the current directory to the /app/orchestrator/src directory in the container
      - ./orchestrator/src:/app/orchestrator/src
  fraud_detection:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./fraud_detection/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50051:50051
    env_file:
      - .env
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/fraud_detection/src/app.py
      # The PYTHONPATH environment variable specifies where Python looks for modules/packages
      # Setting it to /app ensures imports can be resolved relative to the project root
      - PYTHONPATH=/app
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./fraud_detection/src:/app/fraud_detection/src
  transaction_verification:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./transaction_verification/Dockerfile
    ports:
      # Expose port 50052 on the host, and map port 50052 of the container to port 50052 on the host
      - 50052:50052
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the transaction_verification directory to see how this is used
      - PYTHONFILE=/app/transaction_verification/src/app.py
      # The PYTHONPATH environment variable specifies where Python looks for modules/packages
      # Setting it to /app ensures imports can be resolved relative to the project root
      - PYTHONPATH=/app
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the transaction_verification/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./transaction_verification/src:/app/transaction_verification/src
  suggestions:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the suggestions directorys
      dockerfile: ./suggestions/Dockerfile
    ports:
      # Expose port 50053 on the host, and map port 50053 of the container to port 50053 on the host
      - 50053:50053
    env_file:
      - .env
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the suggestions directory to see how this is used
      - PYTHONFILE=/app/suggestions/src/app.py
      # The PYTHONPATH environment variable specifies where Python looks for modules/packages
      # Setting it to /app ensures imports can be resolved relative to the project root
      - PYTHONPATH=/app
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the suggestions/src directory in the current directory to the /app/suggestions/src directory in the container
      - ./suggestions/src:/app/suggestions/src
  orderqueue:
    build:
      context: ./
      dockerfile: ./orderqueue/Dockerfile
    ports:
      - 50054:50054
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/orderqueue/src/app.py
      - PYTHONPATH=/app
    volumes:
      - ./utils:/app/utils
      - ./orderqueue/src:/app/orderqueue/src
  order_executor1:
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    container_name: order_executor1
    environment:
      - EXECUTOR_ID=1
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_executor/src/app.py
      - PYTHONPATH=/app
    ports:
      - 50055:50055
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src

  order_executor2:
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    container_name: order_executor2
    environment:
      - EXECUTOR_ID=2
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_executor/src/app.py
      - PYTHONPATH=/app
    ports:
      - 50056:50056
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src
  order_executor3:
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    container_name: order_executor3
    environment:
      - EXECUTOR_ID=3
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_executor/src/app.py
      - PYTHONPATH=/app
    ports:
      - 50057:50057
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src
  order_executor4:
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    container_name: order_executor4
    environment:
      - EXECUTOR_ID=4
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_executor/src/app.py
      - PYTHONPATH=/app
    ports:
      - 50058:50058
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src
  books_database1:
    build:
      context: ./
      dockerfile: ./books_database/Dockerfile
    ports:
      - 50059:50059
    container_name: books_database1
    environment:
      - DATABASE_ID=1
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/books_database/src/app.py
      - PYTHONPATH=/app
    volumes:
      - ./utils:/app/utils
      - ./books_database/src:/app/books_database/src
  books_database2:
    build:
      context: ./
      dockerfile: ./books_database/Dockerfile
    ports:
      - 50060:50060
    container_name: books_database2
    environment:
      - DATABASE_ID=2
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/books_database/src/app.py
      - PYTHONPATH=/app
    volumes:
      - ./utils:/app/utils
      - ./books_database/src:/app/books_database/src
  books_database3:
    build:
      context: ./
      dockerfile: ./books_database/Dockerfile
    ports:
      - 50061:50061
    container_name: books_database3
    environment:
      - DATABASE_ID=3
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/books_database/src/app.py
      - PYTHONPATH=/app
    volumes:
      - ./utils:/app/utils
      - ./books_database/src:/app/books_database/src
  payment:
    build:
      context: ./
      dockerfile: payment/Dockerfile
    ports:
      - 50062:50062
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/payment/src/app.py
      - PYTHONPATH=/app
    volumes:
      - ./utils:/app/utils
      - ./payment/src:/app/payment/src
  observability:
    image: grafana/otel-lgtm
    ports:
      - "3000:3000"
      - "4317:4317"
    environment:
      - OTEL_METRIC_EXPORT_INTERVAL=1000